generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  company   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription info
  plan           SubscriptionPlan @default(FREE)
  subscriptionId String?
  customerId     String?
  currentPeriodEnd DateTime?

  // Relations
  modules     UserModule[]
  tasks       Task[]
  events      Event[]
  transactions Transaction[]
  checklists  Checklist[]
  taxReports  TaxReport[]

  @@map("users")
}

model UserModule {
  id       String     @id @default(cuid())
  userId   String
  type     ModuleType
  name     String
  config   Json?
  isActive Boolean    @default(true)
  order    Int        @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_modules")
}

model Task {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completed   Boolean    @default(false)
  completedAt DateTime?
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Event {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  allDay      Boolean   @default(false)
  color       String?
  location    String?
  reminder    Int?      // minutes before event
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  description String
  category    String
  date        DateTime
  isRecurring Boolean           @default(false)
  recurringInterval String?     // monthly, yearly, etc.
  attachments String[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Checklist {
  id        String          @id @default(cuid())
  userId    String
  title     String
  description String?
  items     ChecklistItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("checklists")
}

model ChecklistItem {
  id          String    @id @default(cuid())
  checklistId String
  title       String
  completed   Boolean   @default(false)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model TaxReport {
  id        String   @id @default(cuid())
  userId    String
  year      Int
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year])
  @@map("tax_reports")
}

model SupportTicket {
  id        String        @id @default(cuid())
  email     String
  subject   String
  message   String
  status    TicketStatus  @default(OPEN)
  priority  Priority      @default(MEDIUM)
  response  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("support_tickets")
}

// Enums
enum SubscriptionPlan {
  FREE
  PREMIUM
}

enum ModuleType {
  CALENDAR
  FINANCE
  TASKS
  CHECKLIST
  CHARTS
  TAX_SIMULATOR
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
} 